#include<iostream>

using namespace std;



template <typename T> // T라는 이름을 이용해 아래의 함수를 템플릿으로 정의한다.

T Add(T n1, T n2){
	return n1 + n2;
}

int main(){
	cout << Add<int>(15,20) << endl;  // <int>가 의미하는 바: T를 int로 해서 만들어진 Add함수를 호출한다. 자료형에 따라서 함수들을 새로이 만드는 것이 아니다. 
	cout << Add<double>(2.9+3.7) << endl; // 컴파일 당시 만들어놓은 함수를 호출하는 것이므로 함수 실행 속도에는 지장이 없다. 컴파일 속도는 조금 느려짐. 
	cout << Add(2.8+3.6) << endl; //이렇게 써도 무방하다. 컴파일러가 알아서 매개변수를 보고 double타입을 확인하여 적절한 함수를 호출한다.
	//16번째 줄처럼 호출 방법이 템플릿 함수가 아니면 일반적으로 일반함수가 먼저 호출된다. double Add(double n1,double n2); 로 선언 되어있는 함수가 먼저 호출됨. 따라서 템플릿함수를 호출하려면 <>를 이용하자.
	//템플릿 함수와 함수 템플릿은 의미가 다르다
	//함수 템플릿 : 함수를 만드는데 사용되는 템플릿, 호출이 가능한 함수가 아닌, 템플릿을 강조한 의미. 7번줄부터 11번줄을 의미함
	//템플릿 함수 : 14,15번째 줄과 같이 호출이 가능한 함수 
}